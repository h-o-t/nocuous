"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts_morph_1 = require("ts-morph");
const seenIfStatements = new Set();
function ifStatementDepth(node) {
  if (seenIfStatements.has(node)) {
    return 0;
  }
  let score = 1;
  seenIfStatements.add(node);
  node.getThenStatement().forEachDescendant((node, traversal) => {
    const kind = node.getKind();
    switch (kind) {
      case ts_morph_1.SyntaxKind.ArrowFunction:
      case ts_morph_1.SyntaxKind.FunctionDeclaration:
      case ts_morph_1.SyntaxKind.FunctionExpression:
      case ts_morph_1.SyntaxKind.MethodDeclaration:
        traversal.skip();
        break;
      case ts_morph_1.SyntaxKind.IfStatement:
        score += ifStatementDepth(node);
        break;
      default:
    }
  });
  return score;
}
exports.stat = async function stat(sourceFile, { threshold }) {
  let count = 0;
  let score = 0;
  sourceFile.forEachDescendant(node => {
    if (ts_morph_1.TypeGuards.isIfStatement(node)) {
      const value = ifStatementDepth(node);
      if (value) {
        count++;
        score += threshold > 0 && value >= threshold ? value / threshold : 0;
      }
    }
  });
  return count
    ? {
        metric: "nestedIfDepth",
        level: "statement",
        count,
        threshold,
        score
      }
    : undefined;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdGVkSWZEZXB0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdGF0cy9uZXN0ZWRJZkRlcHRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQStEO0FBSS9ELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztBQU1oRCxTQUFTLGdCQUFnQixDQUFDLElBQWlCO0lBQ3pDLElBQUksZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzlCLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFDRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQUU7UUFDNUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzVCLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxxQkFBVSxDQUFDLGFBQWEsQ0FBQztZQUM5QixLQUFLLHFCQUFVLENBQUMsbUJBQW1CLENBQUM7WUFDcEMsS0FBSyxxQkFBVSxDQUFDLGtCQUFrQixDQUFDO1lBQ25DLEtBQUsscUJBQVUsQ0FBQyxpQkFBaUI7Z0JBQy9CLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDakIsTUFBTTtZQUNSLEtBQUsscUJBQVUsQ0FBQyxXQUFXO2dCQUN6QixLQUFLLElBQUksZ0JBQWdCLENBQUMsSUFBbUIsQ0FBQyxDQUFDO2dCQUMvQyxNQUFNO1lBQ1IsUUFBUTtTQUVUO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFNWSxRQUFBLElBQUksR0FBc0IsS0FBSyxVQUFVLElBQUksQ0FDeEQsVUFBVSxFQUNWLEVBQUUsU0FBUyxFQUFFO0lBRWIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsVUFBVSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2xDLElBQUkscUJBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEMsTUFBTSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsS0FBSyxFQUFFLENBQUM7Z0JBQ1IsS0FBSyxJQUFJLFNBQVMsR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3RFO1NBQ0Y7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sS0FBSztRQUNWLENBQUMsQ0FBQztZQUNFLE1BQU0sRUFBRSxlQUFlO1lBQ3ZCLEtBQUssRUFBRSxXQUFXO1lBQ2xCLEtBQUs7WUFDTCxTQUFTO1lBQ1QsS0FBSztTQUNOO1FBQ0gsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNoQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZlN0YXRlbWVudCwgU3ludGF4S2luZCwgVHlwZUd1YXJkcyB9IGZyb20gXCJ0cy1tb3JwaFwiO1xuaW1wb3J0IHsgU3RhdCwgU3RhdE9wdGlvbnMgfSBmcm9tIFwiLi4vaW50ZXJmYWNlc1wiO1xuXG4vKiogQSBzZXQgb2YgaWYgc3RhdGVtZW50cyB0byBlbnN1cmUgdGhlIGRvdWJsZSBjb3VudGluZyBkb2VzIG5vdCBvY2N1ci4gKi9cbmNvbnN0IHNlZW5JZlN0YXRlbWVudHMgPSBuZXcgU2V0PElmU3RhdGVtZW50PigpO1xuXG4vKiogRm9yIGEgZ2l2ZW4gaWYgc3RhdGVtZW50LCByZXR1cm4gdGhlIGRlcHRoIG9mIHN1YnNlcXVlbnQgaWYgc3RhdGVtZW50cy5cbiAqIFRlcm1pbmF0ZSB0aGUgY291bnQgd2hlbiByZWFjaGluZyBhIGZ1bmN0aW9uL21ldGhvZCBib3VuZGFyeS4gIFJldHVybiBgMGAgaWZcbiAqIHRoZSBgaWZgIHN0YXRlbWVudCB3YXMgYWxyZWFkeSBzZWVuLlxuICovXG5mdW5jdGlvbiBpZlN0YXRlbWVudERlcHRoKG5vZGU6IElmU3RhdGVtZW50KTogbnVtYmVyIHtcbiAgaWYgKHNlZW5JZlN0YXRlbWVudHMuaGFzKG5vZGUpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgbGV0IHNjb3JlID0gMTtcbiAgc2VlbklmU3RhdGVtZW50cy5hZGQobm9kZSk7XG4gIG5vZGUuZ2V0VGhlblN0YXRlbWVudCgpLmZvckVhY2hEZXNjZW5kYW50KChub2RlLCB0cmF2ZXJzYWwpID0+IHtcbiAgICBjb25zdCBraW5kID0gbm9kZS5nZXRLaW5kKCk7XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIFN5bnRheEtpbmQuQXJyb3dGdW5jdGlvbjpcbiAgICAgIGNhc2UgU3ludGF4S2luZC5GdW5jdGlvbkRlY2xhcmF0aW9uOlxuICAgICAgY2FzZSBTeW50YXhLaW5kLkZ1bmN0aW9uRXhwcmVzc2lvbjpcbiAgICAgIGNhc2UgU3ludGF4S2luZC5NZXRob2REZWNsYXJhdGlvbjpcbiAgICAgICAgdHJhdmVyc2FsLnNraXAoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFN5bnRheEtpbmQuSWZTdGF0ZW1lbnQ6XG4gICAgICAgIHNjb3JlICs9IGlmU3RhdGVtZW50RGVwdGgobm9kZSBhcyBJZlN0YXRlbWVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2NvcmU7XG59XG5cbi8qKlxuICogQXNzZXNzIHRoZSBkZXB0aCBvZiBuZXN0ZWQgYGlmYCBzdGF0ZW1lbnRzIGFib3ZlIHRoZSB0aHJlc2hvbGQgZm9yIGEgZ2l2ZW5cbiAqIHNvdXJjZSBmaWxlLlxuICovXG5leHBvcnQgY29uc3Qgc3RhdDogU3RhdDxTdGF0T3B0aW9ucz4gPSBhc3luYyBmdW5jdGlvbiBzdGF0KFxuICBzb3VyY2VGaWxlLFxuICB7IHRocmVzaG9sZCB9XG4pIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IHNjb3JlID0gMDtcbiAgc291cmNlRmlsZS5mb3JFYWNoRGVzY2VuZGFudChub2RlID0+IHtcbiAgICBpZiAoVHlwZUd1YXJkcy5pc0lmU3RhdGVtZW50KG5vZGUpKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGlmU3RhdGVtZW50RGVwdGgobm9kZSk7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgc2NvcmUgKz0gdGhyZXNob2xkID4gMCAmJiB2YWx1ZSA+PSB0aHJlc2hvbGQgPyB2YWx1ZSAvIHRocmVzaG9sZCA6IDA7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNvdW50XG4gICAgPyB7XG4gICAgICAgIG1ldHJpYzogXCJuZXN0ZWRJZkRlcHRoXCIsXG4gICAgICAgIGxldmVsOiBcInN0YXRlbWVudFwiLFxuICAgICAgICBjb3VudCxcbiAgICAgICAgdGhyZXNob2xkLFxuICAgICAgICBzY29yZVxuICAgICAgfVxuICAgIDogdW5kZWZpbmVkO1xufTtcbiJdfQ==
