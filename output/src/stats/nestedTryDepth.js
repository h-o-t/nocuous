"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts_morph_1 = require("ts-morph");
const seenTryStatements = new Set();
function tryStatementDepth(node) {
  if (seenTryStatements.has(node)) {
    return 0;
  }
  let score = 1;
  seenTryStatements.add(node);
  node.getTryBlock().forEachDescendant((node, traversal) => {
    const kind = node.getKind();
    switch (kind) {
      case ts_morph_1.SyntaxKind.ArrowFunction:
      case ts_morph_1.SyntaxKind.FunctionDeclaration:
      case ts_morph_1.SyntaxKind.FunctionExpression:
      case ts_morph_1.SyntaxKind.MethodDeclaration:
        traversal.skip();
        break;
      case ts_morph_1.SyntaxKind.TryStatement:
        score += tryStatementDepth(node);
        break;
      default:
    }
  });
  return score;
}
exports.stat = async function stat(sourceFile, { threshold }) {
  let count = 0;
  let score = 0;
  sourceFile.forEachDescendant(node => {
    if (ts_morph_1.TypeGuards.isTryStatement(node)) {
      const value = tryStatementDepth(node);
      if (value) {
        count++;
        score += threshold > 0 && value >= threshold ? value / threshold : 0;
      }
    }
  });
  return count
    ? {
        metric: "nestedTryDepth",
        level: "statement",
        count,
        threshold,
        score
      }
    : undefined;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdGVkVHJ5RGVwdGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RhdHMvbmVzdGVkVHJ5RGVwdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FBZ0U7QUFJaEUsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLEdBQUcsRUFBZ0IsQ0FBQztBQU9sRCxTQUFTLGlCQUFpQixDQUFDLElBQWtCO0lBQzNDLElBQUksaUJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQy9CLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFDRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUFFO1FBQ3ZELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM1QixRQUFRLElBQUksRUFBRTtZQUNaLEtBQUsscUJBQVUsQ0FBQyxhQUFhLENBQUM7WUFDOUIsS0FBSyxxQkFBVSxDQUFDLG1CQUFtQixDQUFDO1lBQ3BDLEtBQUsscUJBQVUsQ0FBQyxrQkFBa0IsQ0FBQztZQUNuQyxLQUFLLHFCQUFVLENBQUMsaUJBQWlCO2dCQUMvQixTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2pCLE1BQU07WUFDUixLQUFLLHFCQUFVLENBQUMsWUFBWTtnQkFDMUIsS0FBSyxJQUFJLGlCQUFpQixDQUFDLElBQW9CLENBQUMsQ0FBQztnQkFDakQsTUFBTTtZQUNSLFFBQVE7U0FFVDtJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBTVksUUFBQSxJQUFJLEdBQXNCLEtBQUssVUFBVSxJQUFJLENBQ3hELFVBQVUsRUFDVixFQUFFLFNBQVMsRUFBRTtJQUViLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNsQyxJQUFJLHFCQUFVLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ25DLE1BQU0sS0FBSyxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RDLElBQUksS0FBSyxFQUFFO2dCQUNULEtBQUssRUFBRSxDQUFDO2dCQUNSLEtBQUssSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN0RTtTQUNGO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLEtBQUs7UUFDVixDQUFDLENBQUM7WUFDRSxNQUFNLEVBQUUsZ0JBQWdCO1lBQ3hCLEtBQUssRUFBRSxXQUFXO1lBQ2xCLEtBQUs7WUFDTCxTQUFTO1lBQ1QsS0FBSztTQUNOO1FBQ0gsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNoQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTeW50YXhLaW5kLCBUcnlTdGF0ZW1lbnQsIFR5cGVHdWFyZHMgfSBmcm9tIFwidHMtbW9ycGhcIjtcbmltcG9ydCB7IFN0YXQsIFN0YXRPcHRpb25zIH0gZnJvbSBcIi4uL2ludGVyZmFjZXNcIjtcblxuLyoqIEEgc2V0IG9mIGB0cnlgIHN0YXRlbWVudHMgdG8gZW5zdXJlIHRoZSBkb3VibGUgY291bnRpbmcgZG9lcyBub3Qgb2NjdXIuICovXG5jb25zdCBzZWVuVHJ5U3RhdGVtZW50cyA9IG5ldyBTZXQ8VHJ5U3RhdGVtZW50PigpO1xuXG4vKipcbiAqIEZvciBhIGdpdmVuIGB0cnlgIHN0YXRlbWVudCwgcmV0dXJuIHRoZSBkZXB0aCBvZiBzdWJzZXF1ZW50IGB0cnlgXG4gKiBzdGF0ZW1lbnRzLiAgVGVybWluYXRlIHRoZSBjb3VudCB3aGVuIHJlYWNoaW5nIGEgZnVuY3Rpb24vbWV0aG9kIGJvdW5kYXJ5LlxuICogUmV0dXJuIGAwYCBpZiB0aGUgYHRyeWAgc3RhdGVtZW50IHdhcyBhbHJlYWR5IHNlZW4uXG4gKi9cbmZ1bmN0aW9uIHRyeVN0YXRlbWVudERlcHRoKG5vZGU6IFRyeVN0YXRlbWVudCk6IG51bWJlciB7XG4gIGlmIChzZWVuVHJ5U3RhdGVtZW50cy5oYXMobm9kZSkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBsZXQgc2NvcmUgPSAxO1xuICBzZWVuVHJ5U3RhdGVtZW50cy5hZGQobm9kZSk7XG4gIG5vZGUuZ2V0VHJ5QmxvY2soKS5mb3JFYWNoRGVzY2VuZGFudCgobm9kZSwgdHJhdmVyc2FsKSA9PiB7XG4gICAgY29uc3Qga2luZCA9IG5vZGUuZ2V0S2luZCgpO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBTeW50YXhLaW5kLkFycm93RnVuY3Rpb246XG4gICAgICBjYXNlIFN5bnRheEtpbmQuRnVuY3Rpb25EZWNsYXJhdGlvbjpcbiAgICAgIGNhc2UgU3ludGF4S2luZC5GdW5jdGlvbkV4cHJlc3Npb246XG4gICAgICBjYXNlIFN5bnRheEtpbmQuTWV0aG9kRGVjbGFyYXRpb246XG4gICAgICAgIHRyYXZlcnNhbC5za2lwKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTeW50YXhLaW5kLlRyeVN0YXRlbWVudDpcbiAgICAgICAgc2NvcmUgKz0gdHJ5U3RhdGVtZW50RGVwdGgobm9kZSBhcyBUcnlTdGF0ZW1lbnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAvLyBub29wXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNjb3JlO1xufVxuXG4vKipcbiAqIEFzc2VzcyB0aGUgZGVwdGggb2YgbmVzdGVkIGB0cnlgIHN0YXRlbWVudHMgYWJvdmUgdGhlIHRocmVzaG9sZCBmb3IgYSBnaXZlblxuICogc291cmNlIGZpbGUuXG4gKi9cbmV4cG9ydCBjb25zdCBzdGF0OiBTdGF0PFN0YXRPcHRpb25zPiA9IGFzeW5jIGZ1bmN0aW9uIHN0YXQoXG4gIHNvdXJjZUZpbGUsXG4gIHsgdGhyZXNob2xkIH1cbikge1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgc2NvcmUgPSAwO1xuICBzb3VyY2VGaWxlLmZvckVhY2hEZXNjZW5kYW50KG5vZGUgPT4ge1xuICAgIGlmIChUeXBlR3VhcmRzLmlzVHJ5U3RhdGVtZW50KG5vZGUpKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRyeVN0YXRlbWVudERlcHRoKG5vZGUpO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICAgIHNjb3JlICs9IHRocmVzaG9sZCA+IDAgJiYgdmFsdWUgPj0gdGhyZXNob2xkID8gdmFsdWUgLyB0aHJlc2hvbGQgOiAwO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjb3VudFxuICAgID8ge1xuICAgICAgICBtZXRyaWM6IFwibmVzdGVkVHJ5RGVwdGhcIixcbiAgICAgICAgbGV2ZWw6IFwic3RhdGVtZW50XCIsXG4gICAgICAgIGNvdW50LFxuICAgICAgICB0aHJlc2hvbGQsXG4gICAgICAgIHNjb3JlXG4gICAgICB9XG4gICAgOiB1bmRlZmluZWQ7XG59O1xuIl19
