"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts_morph_1 = require("ts-morph");
function binaryExpressionComplexity(node) {
  let complexity = 0;
  node.forEachChild(node => {
    const kind = node.getKind();
    if (
      kind === ts_morph_1.SyntaxKind.AmpersandAmpersandToken ||
      kind === ts_morph_1.SyntaxKind.BarBarToken
    ) {
      complexity++;
    }
  });
  return complexity;
}
function cyclomaticComplexity(node) {
  let complexity = 1;
  node.forEachDescendant((node, traversal) => {
    let expression;
    switch (node.getKind()) {
      case ts_morph_1.SyntaxKind.CaseClause:
      case ts_morph_1.SyntaxKind.CatchClause:
      case ts_morph_1.SyntaxKind.ConditionalExpression:
      case ts_morph_1.SyntaxKind.ForInStatement:
      case ts_morph_1.SyntaxKind.ForOfStatement:
        complexity++;
        break;
      case ts_morph_1.SyntaxKind.DoStatement:
        expression = node.getExpression();
        if (
          ts_morph_1.TypeGuards.isBinaryExpression(expression) ||
          ts_morph_1.TypeGuards.isIdentifier(expression) ||
          ts_morph_1.TypeGuards.isPrefixUnaryExpression(expression)
        ) {
          complexity++;
        }
        break;
      case ts_morph_1.SyntaxKind.ForStatement:
        const condition = node.getCondition();
        if (
          condition &&
          (ts_morph_1.TypeGuards.isBinaryExpression(condition) ||
            ts_morph_1.TypeGuards.isIdentifier(condition) ||
            ts_morph_1.TypeGuards.isPrefixUnaryExpression(condition))
        ) {
          complexity++;
        }
        break;
      case ts_morph_1.SyntaxKind.IfStatement:
        complexity += node.getElseStatement() ? 2 : 1;
        break;
      case ts_morph_1.SyntaxKind.BinaryExpression:
        complexity += binaryExpressionComplexity(node);
        break;
      case ts_morph_1.SyntaxKind.WhileStatement:
        expression = node.getExpression();
        if (
          ts_morph_1.TypeGuards.isBinaryExpression(expression) ||
          ts_morph_1.TypeGuards.isIdentifier(expression) ||
          ts_morph_1.TypeGuards.isPrefixUnaryExpression(expression)
        ) {
          complexity++;
        }
        break;
      case ts_morph_1.SyntaxKind.FunctionDeclaration:
      case ts_morph_1.SyntaxKind.FunctionExpression:
      case ts_morph_1.SyntaxKind.ArrowFunction:
      case ts_morph_1.SyntaxKind.MethodDeclaration:
      case ts_morph_1.SyntaxKind.ClassExpression:
        traversal.skip();
        break;
      default:
    }
  });
  return complexity;
}
exports.stat = async function stat(sourceFile, { threshold }) {
  let count = 0;
  let score = 0;
  sourceFile.forEachDescendant(node => {
    if (
      ts_morph_1.TypeGuards.isFunctionDeclaration(node) ||
      ts_morph_1.TypeGuards.isFunctionExpression(node) ||
      ts_morph_1.TypeGuards.isMethodDeclaration(node) ||
      ts_morph_1.TypeGuards.isArrowFunction(node)
    ) {
      count++;
      const complexity = cyclomaticComplexity(node);
      score +=
        threshold && complexity >= threshold ? complexity / threshold : 0;
    }
  });
  return count
    ? {
        metric: "cyclomaticComplexity",
        level: "function",
        count,
        threshold,
        score
      }
    : undefined;
};
//# sourceMappingURL=data:application/json;base64,
